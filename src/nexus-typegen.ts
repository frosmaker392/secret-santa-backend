/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  LoginForm: { // input type
    password: string; // String!
    usernameOrEmail: string; // String!
  }
  RegisterForm: { // input type
    email: string; // String!
    name?: string | null; // String
    password: string; // String!
    username: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  FieldError: { // root type
    message: string; // String!
    name: string; // String!
  }
  LoginResult: { // root type
    token?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  Mutation: {};
  Query: {};
  RegisterPayload: { // root type
    user: NexusGenRootTypes['User']; // User!
  }
  User: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: string; // ID!
    name?: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    username: string; // String!
  }
  UserAlreadyExistsError: { // root type
    existsOnFields: string[]; // [String!]!
    message: string; // String!
  }
  ValidationError: { // root type
    fields: NexusGenRootTypes['FieldError'][]; // [FieldError!]!
    message: string; // String!
  }
}

export interface NexusGenInterfaces {
  Error: NexusGenRootTypes['FieldError'] | NexusGenRootTypes['UserAlreadyExistsError'] | NexusGenRootTypes['ValidationError'];
}

export interface NexusGenUnions {
  RegisterResult: NexusGenRootTypes['RegisterPayload'] | NexusGenRootTypes['UserAlreadyExistsError'] | NexusGenRootTypes['ValidationError'];
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  FieldError: { // field return type
    message: string; // String!
    name: string; // String!
  }
  LoginResult: { // field return type
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Mutation: { // field return type
    login: NexusGenRootTypes['LoginResult']; // LoginResult!
    register: NexusGenRootTypes['RegisterResult']; // RegisterResult!
  }
  Query: { // field return type
    getCurrentUser: NexusGenRootTypes['User'] | null; // User
  }
  RegisterPayload: { // field return type
    user: NexusGenRootTypes['User']; // User!
  }
  User: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: string; // ID!
    name: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    username: string; // String!
  }
  UserAlreadyExistsError: { // field return type
    existsOnFields: string[]; // [String!]!
    message: string; // String!
  }
  ValidationError: { // field return type
    fields: NexusGenRootTypes['FieldError'][]; // [FieldError!]!
    message: string; // String!
  }
  Error: { // field return type
    message: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  FieldError: { // field return type name
    message: 'String'
    name: 'String'
  }
  LoginResult: { // field return type name
    token: 'String'
    user: 'User'
  }
  Mutation: { // field return type name
    login: 'LoginResult'
    register: 'RegisterResult'
  }
  Query: { // field return type name
    getCurrentUser: 'User'
  }
  RegisterPayload: { // field return type name
    user: 'User'
  }
  User: { // field return type name
    createdAt: 'DateTime'
    email: 'String'
    id: 'ID'
    name: 'String'
    updatedAt: 'DateTime'
    username: 'String'
  }
  UserAlreadyExistsError: { // field return type name
    existsOnFields: 'String'
    message: 'String'
  }
  ValidationError: { // field return type name
    fields: 'FieldError'
    message: 'String'
  }
  Error: { // field return type name
    message: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    login: { // args
      form: NexusGenInputs['LoginForm']; // LoginForm!
    }
    register: { // args
      form: NexusGenInputs['RegisterForm']; // RegisterForm!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  RegisterResult: "RegisterPayload" | "UserAlreadyExistsError" | "ValidationError"
  Error: "FieldError" | "UserAlreadyExistsError" | "ValidationError"
}

export interface NexusGenTypeInterfaces {
  FieldError: "Error"
  UserAlreadyExistsError: "Error"
  ValidationError: "Error"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "Error" | "RegisterResult";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}